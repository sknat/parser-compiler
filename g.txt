Segram ::=
ees ';; egramnxt -> [[ "class ExpressionFactory {\n"+
				"Expression expression;\n"+
				"Parser parser;\n"+
				"public ExpressionFactory(Lexer lexer) throws IOException {\n"+
				"Parser parser = new Parser(lexer);\n"+
				"expression = parser.parse();\n"+
				"}\n"+
				"public Value eval() throws EvalException {\n"+
				"return expression.eval();\n"+
				"}\n"+
				"public String represent() throws EvalException {\n"+
				"return expression.toString();\n"+
				"}\n"+
				"public String toString() {\n"+
				"try {return \"Parsed as : \"+represent()+\" ; computed as : \"+eval();} \n"+
				"catch (EvalException e) {e.printStackTrace(); return \"Evaluation error\";}\n"+
				"}	\n"+				
				"}	\n"+
				$1+
				$3+
				"class EConstant extends Expression {\n"+
				"final Value v;\n"+
				"EConstant(Value v){this.v=v;}\n"+
				"@Override\n"+
				"public Value eval() throws EvalException {return v;}\n"+
				"}\n"+
				"class VBoolean extends Value {\n"+
				"final boolean v;\n"+
				"public String toString () {return (new Boolean (v)).toString();}\n"+
				"VBoolean (boolean v) {this.v = v;}\n"+
				"@Override  \n"+
				"public boolean asBoolean () {return v;}\n"+
				"}\n"+
				"class VString extends Value {\n"+
				"final String v;\n"+
				"public String toString () {return v;}\n"+
				"VString (String v) {this.v = v;}\n"+
				"@Override  \n"+
				"public String asString () {return v;}\n"+
				"}\n"+
				"class VInteger extends Value {\n"+
				"final int v;\n"+
				"public String toString () {return (new Integer (v)).toString();}\n"+
				"VInteger (int v) {this.v = v;}\n"+
				"@Override  \n"+
				"public int asInteger () {return v;}\n"+
				"}\n"+
				"class Parser {\n"+
				"private final Lexer lexer;\n"+
				"public Parser (Lexer lexer) {this.lexer=lexer;}\n"+
				"public Expression parse() throws IOException{\n"+
				"return consume"+((Eees_1) $$1).$$1+" (0);\n"+
				"}\n"+
				$1+
				$3+
				"}\n" ]] 
;;

Segramnxt ::=
ees ';; egramnxt -> [[ $1 + $3 ]]
| ees ';; -> [[ $1 ]] 
;;

Sees ::= 
String '::= ebody -> [[ "");
		int n=0;
		Ebodynxt tmp = ((Ebody) $$3).$$3;
		while (tmp!=null) {tmp=tmp.$$3; n++;}
		String s="private E"+$1+" consume"+$1+" (int lvl) throws IOException {\n"+
		"E"+$1+" res;\n"+
		"lexer.mark();\n";
		for (int i=1;i<n;i++) {
		s=s+"try {res = consume"+$1+"_"+i+" (lvl); lexer.dropMark(); return res;} catch (SyntaxError e"+i+") {\n"+
		"lexer.reset();\n"+
		"lexer.mark();\n";
		};
		s=s+"try {res = consume"+$1+"_"+n+" (lvl); lexer.dropMark(); return res;} catch (SyntaxError e"+n+") {\n"+
				"lexer.reset();\n"+
				"lexer.mark();\n"+
				"throw new SyntaxError (\"Error parsing \"+this);\n"+
				"}\n";
		for (int i=0;i<n;i++) {s=s+"}\n";}
		res=new VString(s+$3); // ]]
;;

Sebody ::= 
eline '| ebodynxt -> [[ text ]]
;;

Sebodynxt ::=
eline '| ebodynxt -> [[ text ]]
| eline -> [[ text ]]
;;

Seline ::= 
escheme String -> [[ text ]]
;;

Sescheme ::= 
eterminal eschemenxt -> [[ text ]]
;;

Seschemenxt ::=
eterminal eschemenxt '-> -> [[ text ]]
;;

Seterminal ::=
String -> [[ text ]]
;;